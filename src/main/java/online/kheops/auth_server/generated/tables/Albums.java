/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.AlbumsRecord;
import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;

import javax.annotation.Generated;
import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Albums extends TableImpl<AlbumsRecord> {

    private static final long serialVersionUID = 313199869;

    /**
     * The reference instance of <code>public.albums</code>
     */
    public static final Albums ALBUMS = new Albums();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumsRecord> getRecordType() {
        return AlbumsRecord.class;
    }

    /**
     * The column <code>public.albums.pk</code>.
     */
    public final TableField<AlbumsRecord, Long> PK = createField("pk", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('album_pk_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.albums.id</code>.
     */
    public final TableField<AlbumsRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.albums.name</code>.
     */
    public final TableField<AlbumsRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.albums.description</code>.
     */
    public final TableField<AlbumsRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>public.albums.created_time</code>.
     */
    public final TableField<AlbumsRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.albums.last_event_time</code>.
     */
    public final TableField<AlbumsRecord, Timestamp> LAST_EVENT_TIME = createField("last_event_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.albums.add_user_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> ADD_USER_PERMISSION = createField("add_user_permission", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.download_series_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> DOWNLOAD_SERIES_PERMISSION = createField("download_series_permission", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.send_series_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> SEND_SERIES_PERMISSION = createField("send_series_permission", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.delete_series_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> DELETE_SERIES_PERMISSION = createField("delete_series_permission", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.add_series_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> ADD_SERIES_PERMISSION = createField("add_series_permission", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.albums.write_comments_permission</code>.
     */
    public final TableField<AlbumsRecord, Boolean> WRITE_COMMENTS_PERMISSION = createField("write_comments_permission", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.albums</code> table reference
     */
    public Albums() {
        this(DSL.name("albums"), null);
    }

    /**
     * Create an aliased <code>public.albums</code> table reference
     */
    public Albums(String alias) {
        this(DSL.name(alias), ALBUMS);
    }

    /**
     * Create an aliased <code>public.albums</code> table reference
     */
    public Albums(Name alias) {
        this(alias, ALBUMS);
    }

    private Albums(Name alias, Table<AlbumsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Albums(Name alias, Table<AlbumsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Albums(Table<O> child, ForeignKey<O, AlbumsRecord> key) {
        super(child, key, ALBUMS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ALBUM_PK, Indexes.ALBUMS_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AlbumsRecord, Long> getIdentity() {
        return Keys.IDENTITY_ALBUMS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AlbumsRecord> getPrimaryKey() {
        return Keys.ALBUM_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AlbumsRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumsRecord>>asList(Keys.ALBUM_PK, Keys.ALBUMS_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Albums as(String alias) {
        return new Albums(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Albums as(Name alias) {
        return new Albums(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(String name) {
        return new Albums(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Albums rename(Name name) {
        return new Albums(name, null);
    }
}

/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.DicomSrRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class DicomSr extends TableImpl<DicomSrRecord> {

    private static final long serialVersionUID = 1430228333;

    /**
     * The reference instance of <code>public.dicom_sr</code>
     */
    public static final DicomSr DICOM_SR = new DicomSr();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DicomSrRecord> getRecordType() {
        return DicomSrRecord.class;
    }

    /**
     * The column <code>public.dicom_sr.pk</code>.
     */
    public final TableField<DicomSrRecord, Long> PK = createField("pk", org.jooq.impl.SQLDataType.BIGINT.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('dicom_sr_pk_seq'::regclass)", org.jooq.impl.SQLDataType.BIGINT)), this, "");

    /**
     * The column <code>public.dicom_sr.album_fk</code>.
     */
    public final TableField<DicomSrRecord, Long> ALBUM_FK = createField("album_fk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.dicom_sr.creation_time</code>.
     */
    public final TableField<DicomSrRecord, Timestamp> CREATION_TIME = createField("creation_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>public.dicom_sr.user_fk</code>.
     */
    public final TableField<DicomSrRecord, Long> USER_FK = createField("user_fk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.dicom_sr.name</code>.
     */
    public final TableField<DicomSrRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.dicom_sr.url</code>.
     */
    public final TableField<DicomSrRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.dicom_sr.client_id</code>.
     */
    public final TableField<DicomSrRecord, String> CLIENT_ID = createField("client_id", org.jooq.impl.SQLDataType.VARCHAR(64).nullable(false), this, "");

    /**
     * The column <code>public.dicom_sr.client_secret</code>.
     */
    public final TableField<DicomSrRecord, String> CLIENT_SECRET = createField("client_secret", org.jooq.impl.SQLDataType.VARCHAR(64), this, "");

    /**
     * The column <code>public.dicom_sr.private</code>.
     */
    public final TableField<DicomSrRecord, Boolean> PRIVATE = createField("private", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * Create a <code>public.dicom_sr</code> table reference
     */
    public DicomSr() {
        this(DSL.name("dicom_sr"), null);
    }

    /**
     * Create an aliased <code>public.dicom_sr</code> table reference
     */
    public DicomSr(String alias) {
        this(DSL.name(alias), DICOM_SR);
    }

    /**
     * Create an aliased <code>public.dicom_sr</code> table reference
     */
    public DicomSr(Name alias) {
        this(alias, DICOM_SR);
    }

    private DicomSr(Name alias, Table<DicomSrRecord> aliased) {
        this(alias, aliased, null);
    }

    private DicomSr(Name alias, Table<DicomSrRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> DicomSr(Table<O> child, ForeignKey<O, DicomSrRecord> key) {
        super(child, key, DICOM_SR);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DICOM_SR_CLIENT_ID_UNIQUE, Indexes.DICOM_SR_PK, Indexes.INDUNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<DicomSrRecord, Long> getIdentity() {
        return Keys.IDENTITY_DICOM_SR;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<DicomSrRecord> getPrimaryKey() {
        return Keys.DICOM_SR_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<DicomSrRecord>> getKeys() {
        return Arrays.<UniqueKey<DicomSrRecord>>asList(Keys.DICOM_SR_PK, Keys.DICOM_SR_CLIENT_ID_UNIQUE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<DicomSrRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DicomSrRecord, ?>>asList(Keys.DICOM_SR__DICOM_SR_ALBUM_FK_FKEY, Keys.DICOM_SR__DICOM_SR_USER_FK_FKEY);
    }

    public Albums albums() {
        return new Albums(this, Keys.DICOM_SR__DICOM_SR_ALBUM_FK_FKEY);
    }

    public Users users() {
        return new Users(this, Keys.DICOM_SR__DICOM_SR_USER_FK_FKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DicomSr as(String alias) {
        return new DicomSr(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public DicomSr as(Name alias) {
        return new DicomSr(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public DicomSr rename(String name) {
        return new DicomSr(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public DicomSr rename(Name name) {
        return new DicomSr(name, null);
    }
}

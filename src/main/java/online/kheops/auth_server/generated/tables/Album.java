/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Kheops;
import online.kheops.auth_server.generated.tables.records.AlbumRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Album extends TableImpl<AlbumRecord> {

    private static final long serialVersionUID = -1296472159;

    /**
     * The reference instance of <code>kheops.album</code>
     */
    public static final Album ALBUM = new Album();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AlbumRecord> getRecordType() {
        return AlbumRecord.class;
    }

    /**
     * The column <code>kheops.album.pk</code>.
     */
    public final TableField<AlbumRecord, Long> PK = createField("pk", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>kheops.album.name</code>.
     */
    public final TableField<AlbumRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>kheops.album.description</code>.
     */
    public final TableField<AlbumRecord, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR(2048), this, "");

    /**
     * The column <code>kheops.album.created_time</code>.
     */
    public final TableField<AlbumRecord, Timestamp> CREATED_TIME = createField("created_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>kheops.album.last_event_time</code>.
     */
    public final TableField<AlbumRecord, Timestamp> LAST_EVENT_TIME = createField("last_event_time", org.jooq.impl.SQLDataType.TIMESTAMP.nullable(false), this, "");

    /**
     * The column <code>kheops.album.add_user_permission</code>.
     */
    public final TableField<AlbumRecord, Byte> ADD_USER_PERMISSION = createField("add_user_permission", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>kheops.album.download_series_permission</code>.
     */
    public final TableField<AlbumRecord, Byte> DOWNLOAD_SERIES_PERMISSION = createField("download_series_permission", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>kheops.album.send_series_permission</code>.
     */
    public final TableField<AlbumRecord, Byte> SEND_SERIES_PERMISSION = createField("send_series_permission", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>kheops.album.delete_series_permission</code>.
     */
    public final TableField<AlbumRecord, Byte> DELETE_SERIES_PERMISSION = createField("delete_series_permission", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>kheops.album.add_series_permission</code>.
     */
    public final TableField<AlbumRecord, Byte> ADD_SERIES_PERMISSION = createField("add_series_permission", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * The column <code>kheops.album.write_comments_permission</code>.
     */
    public final TableField<AlbumRecord, Byte> WRITE_COMMENTS_PERMISSION = createField("write_comments_permission", org.jooq.impl.SQLDataType.TINYINT.nullable(false), this, "");

    /**
     * Create a <code>kheops.album</code> table reference
     */
    public Album() {
        this(DSL.name("album"), null);
    }

    /**
     * Create an aliased <code>kheops.album</code> table reference
     */
    public Album(String alias) {
        this(DSL.name(alias), ALBUM);
    }

    /**
     * Create an aliased <code>kheops.album</code> table reference
     */
    public Album(Name alias) {
        this(alias, ALBUM);
    }

    private Album(Name alias, Table<AlbumRecord> aliased) {
        this(alias, aliased, null);
    }

    private Album(Name alias, Table<AlbumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Album(Table<O> child, ForeignKey<O, AlbumRecord> key) {
        super(child, key, ALBUM);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Kheops.KHEOPS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ALBUM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<AlbumRecord, Long> getIdentity() {
        return Keys.IDENTITY_ALBUM;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<AlbumRecord> getPrimaryKey() {
        return Keys.KEY_ALBUM_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<AlbumRecord>> getKeys() {
        return Arrays.<UniqueKey<AlbumRecord>>asList(Keys.KEY_ALBUM_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Album as(String alias) {
        return new Album(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Album as(Name alias) {
        return new Album(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(String name) {
        return new Album(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Album rename(Name name) {
        return new Album(name, null);
    }
}

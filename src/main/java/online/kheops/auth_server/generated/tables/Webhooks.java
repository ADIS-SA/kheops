/*
 * This file is generated by jOOQ.
 */
package online.kheops.auth_server.generated.tables;


import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import online.kheops.auth_server.generated.Indexes;
import online.kheops.auth_server.generated.Keys;
import online.kheops.auth_server.generated.Public;
import online.kheops.auth_server.generated.tables.records.WebhooksRecord;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.2"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Webhooks extends TableImpl<WebhooksRecord> {

    private static final long serialVersionUID = -208728177;

    /**
     * The reference instance of <code>public.webhooks</code>
     */
    public static final Webhooks WEBHOOKS = new Webhooks();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WebhooksRecord> getRecordType() {
        return WebhooksRecord.class;
    }

    /**
     * The column <code>public.webhooks.pk</code>.
     */
    public final TableField<WebhooksRecord, Long> PK = createField("pk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.id</code>.
     */
    public final TableField<WebhooksRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(30).nullable(false), this, "");

    /**
     * The column <code>public.webhooks.name</code>.
     */
    public final TableField<WebhooksRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.webhooks.url</code>.
     */
    public final TableField<WebhooksRecord, String> URL = createField("url", org.jooq.impl.SQLDataType.VARCHAR(1024).nullable(false), this, "");

    /**
     * The column <code>public.webhooks.enable</code>.
     */
    public final TableField<WebhooksRecord, Boolean> ENABLE = createField("enable", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.user_fk</code>.
     */
    public final TableField<WebhooksRecord, Long> USER_FK = createField("user_fk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.secret</code>.
     */
    public final TableField<WebhooksRecord, String> SECRET = createField("secret", org.jooq.impl.SQLDataType.VARCHAR(1024), this, "");

    /**
     * The column <code>public.webhooks.new_series</code>.
     */
    public final TableField<WebhooksRecord, Boolean> NEW_SERIES = createField("new_series", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.new_user</code>.
     */
    public final TableField<WebhooksRecord, Boolean> NEW_USER = createField("new_user", org.jooq.impl.SQLDataType.BOOLEAN.nullable(false), this, "");

    /**
     * The column <code>public.webhooks.album_fk</code>.
     */
    public final TableField<WebhooksRecord, Long> ALBUM_FK = createField("album_fk", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * Create a <code>public.webhooks</code> table reference
     */
    public Webhooks() {
        this(DSL.name("webhooks"), null);
    }

    /**
     * Create an aliased <code>public.webhooks</code> table reference
     */
    public Webhooks(String alias) {
        this(DSL.name(alias), WEBHOOKS);
    }

    /**
     * Create an aliased <code>public.webhooks</code> table reference
     */
    public Webhooks(Name alias) {
        this(alias, WEBHOOKS);
    }

    private Webhooks(Name alias, Table<WebhooksRecord> aliased) {
        this(alias, aliased, null);
    }

    private Webhooks(Name alias, Table<WebhooksRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Webhooks(Table<O> child, ForeignKey<O, WebhooksRecord> key) {
        super(child, key, WEBHOOKS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.WEBHOOKS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<WebhooksRecord> getPrimaryKey() {
        return Keys.WEBHOOKS_PK;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<WebhooksRecord>> getKeys() {
        return Arrays.<UniqueKey<WebhooksRecord>>asList(Keys.WEBHOOKS_PK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Webhooks as(String alias) {
        return new Webhooks(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Webhooks as(Name alias) {
        return new Webhooks(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Webhooks rename(String name) {
        return new Webhooks(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Webhooks rename(Name name) {
        return new Webhooks(name, null);
    }
}

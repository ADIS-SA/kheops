env JWT_SECRET;
env KHEOPS_PACS_URL;
env KHEOPS_WADO_URI_ROOT;

worker_processes 1;

events { worker_connections 1024; }

http {
    sendfile on;
    lua_package_path '/opt/openresty/nginx/lua/?.lua;;';

    server {
        listen 80;
        client_max_body_size 20000M;
	proxy_send_timeout      120;
        proxy_read_timeout      120;
        proxy_request_buffering off;
        proxy_buffering         off;
        

	set_by_lua $pacs_wado_rs 'return os.getenv("KHEOPS_PACS_URL")';
	set_by_lua $pacs_wado_uri 'return os.getenv("KHEOPS_WADO_URI_ROOT")';


        location /gfazsdfluizasgfluszadgf/asgbdi√©usdgfilsbd/daskiuldgflisuzgbdv/asvbdzhali {
            proxy_pass http://pacs_arc:8080;
        }

        location ~ ^/studies/([0-9.]+)/series/([0-9.]+)(.*) {
            access_by_lua '
                local jwt = require("nginx-jwt")
                jwt.auth({ 
		    study_uid=ngx.var[1],
		    series_uid=ngx.var[2]
                })
            ';

            proxy_pass $pacs_wado_rs/studies/$1/series/$2$3;
        }

        location ~ ^/studies/([0-9.]+)(\/metadata)?$ {
            access_by_lua '
		if ngx.var.request_method == "POST" then
                    local jwt = require("nginx-jwt")
                    jwt.auth({
                        study_uid=ngx.var[1]
                    })
                elseif ngx.var.request_method == "GET" then
                    local jwt = require("nginx-jwt")
                    jwt.auth({ 
		        study_uid=ngx.var[1],
		        series_uid="all_access"
                    })
                else
                    ngx.exit(ngx.HTTP_NOT_ALLOWED)
                end

            ';

            proxy_pass $pacs_wado_rs/studies/$1$2;
        }


        location ~ ^/wado(.*)$ {
            access_by_lua '
                local jwt = require("nginx-jwt")
                jwt.auth({})
            ';

            proxy_pass $pacs_wado_uri$1;
        }

        location /studies {
            access_by_lua '
		if ngx.var.request_method == "POST" then
                    local jwt = require("nginx-jwt")
                    jwt.auth({})
                else
                    ngx.exit(ngx.HTTP_NOT_ALLOWED)
                end
                            
            ';

            proxy_pass $pacs_wado_rs/studies;
        }
    }
}

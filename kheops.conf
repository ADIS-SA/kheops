server {
    listen 80 default_server;
    server_name _;
    return 301 https://$host$request_uri;
}

server {

    listen 443 ssl;
    server_name ${server_name};

    ssl_certificate           /run/secrets/fullchain1.pem;
    ssl_certificate_key       /run/secrets/privkey1.pem;

    ssl_session_cache  builtin:1000  shared:SSL:10m;
    ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers HIGH:!aNULL:!eNULL:!EXPORT:!CAMELLIA:!DES:!MD5:!PSK:!RC4;
    ssl_prefer_server_ciphers on;

    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";

    access_log            /var/log/nginx/access.log;

    client_max_body_size    20000M;
    proxy_send_timeout      120;
    proxy_read_timeout      120;
    proxy_request_buffering off;
    proxy_buffering         off;

    location /token {
      error_page 476 = @authorization;
      return 476;
    }

    location /capabilities {
      error_page 476 = @authorization;
      return 476;
    }

    location /album {
      error_page 476 = @authorization;
      return 476;
    }

    location  /studies {
      error_page 493 = @dicomwebproxy;
      error_page 494 = @authorization;

      if ( $request_method = GET ) { return 494; }
      if ( $request_method = POST ) { return 493; }
    }    

    location  ~ ^/studies/([0-9.]+)/series/([0-9.]+)$ {
      error_page 495 = @dicomwebproxy;
      error_page 496 = @authorization;

      if ( $request_method = GET ) { return 495; }
      if ( $request_method = DELETE ) { return 496; }
    }

    location  ~ ^/studies/([0-9.]+)/series$ {
      error_page 495 = @dicomwebproxy;
      error_page 496 = @authorization;

      if ( $request_method = GET ) { return 495; }
      if ( $request_method = DELETE ) { return 496; }
    }

    location ~ ^/studies/[0-9.]+ {
      error_page 491 = @dicomwebproxy;
      error_page 492 = @authorization;

      if ( $request_method = POST ) { return 491; }
      if ( $request_method != POST ) { return 492; }
    }

    location  /wado {
      error_page 493 = @dicomwebproxy;
      error_page 494 = @zip;

      if ( $arg_requestType = "ZIP" ) { return 494; }
      if ( $arg_requestType = "WADO" ) { return 493; }

      return 400 "requestType must be WADO or ZIP";
    }

    location @dicomwebproxy {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^(.*)$ /capabilities/password/dicomweb$1 break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${DICOMWebProxy_url};

      proxy_redirect      ${DICOMWebProxy_url} ${root_url};
    }

    location @authorization {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^(.*)$ /authorization$1 break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsAuthorization_url};

      proxy_redirect      ${kheopsAuthorization_url} ${root_url};
    }

    location @zip {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^(.*)$ /zipper/studies/$arg_studyUID/stream break;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsZipper_url};

      proxy_redirect      ${kheopsZipper_url} ${root_url};
    }

    location ~ ^/link/[a-zA-Z0-9]* {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      proxy_set_header        Authorization "Bearer $2";

      rewrite ^/(link/)([a-zA-Z0-9]*)(.*)$ $3 break;

      proxy_pass ${root_url};
    }

    location /dicomweb {
      rewrite ^/(dicomweb)(.*)$ $2 last;
    }

    location /testauthorizationproxy {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      rewrite ^/(testauthorizationproxy)(.*)$ $2 break;
      proxy_pass          ${kheopsAuthorizationProxy_url};

      proxy_redirect      ${kheopsAuthorizationProxy_url} ${root_url};
    }

    location / {
      proxy_set_header        Host $host;
      proxy_set_header        X-Real-IP $remote_addr;
      proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header        X-Forwarded-Proto $scheme;

      # Fix the “It appears that your reverse proxy set up is broken" error.
      proxy_pass          ${kheopsWebUI_url};

      proxy_redirect      ${kheopsWebUI_url} ${root_url};
    }
}

